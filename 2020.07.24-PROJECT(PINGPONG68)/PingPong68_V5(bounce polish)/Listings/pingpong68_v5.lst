C51 COMPILER V9.60.0.0   PINGPONG68_V5                                                     08/12/2020 05:55:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PINGPONG68_V5
OBJECT MODULE PLACED IN .\Objects\pingpong68_v5.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pingpong68_v5.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\pingpong68_v5.lst) TABS(2) OBJECT(.\Objects\pingpong68_v5.obj)

line level    source

   1          #include <reg52.h>
   2          //#include <string.h>
   3          //#include <math.h>
   4          #include <paulobetaX5.h>
   5          #include <paulo8x8_v1.h>
   6          //#include <gametimerX1.h>
   7          #define uchar unsigned char
   8          
   9          
  10          //keys
  11          sbit key1=P3^4;
  12          sbit key2=P3^5;
  13          sbit key3=P3^6;
  14          sbit key4=P3^7;
  15          
  16          //gamespeed
  17          uchar autospeed;//whether or not to increase speed automatically
  18          uchar highspeed;//higest speed you can go to
  19          uchar Xclock = 0;
  20          char Xclock_old;
  21          char XgameSpeed,Xclock_divider;
  22          char Xclock_Value1,Xclock_Value2;
  23          
  24          //implement score
  25          //
  26          uchar error=0; // if encounter error=1, if not =0;
  27          uchar xx; // for forloops
  28          //flags
  29          uchar forward=1;
  30          uchar flag = 1;
  31          uchar xflag=1;
  32          
  33          uchar row2draw;// row to draw on
  34          uchar col2draw;// column to draw on
  35          
  36          uchar increment=8;//value pushing ball
  37          uchar ball_location=12;// ranges btween [B9 - B49 
  38          uchar old_ball_location;
  39          uchar bottomracket_location=3; // 6 locations [B1-B6]
  40          uchar topracket_location=59; // 6 locations [B57-B62]
  41          
  42          void Xclock_setup();
  43          void Xclock_reset();
  44          void Xclock_init();
  45          void psplit(uchar splitinput); // split input into 3 for display on 7seg
  46          void updateassets();//updates ball+rackets
  47          void update_ball(); //auto moves ball +/- 1row
  48          void bounce_ball(); //bounces ball if hit any surface
  49          void update_bottomracket(); // gets input to move bottom racket
  50          void update_topracket(); //get input to move top racket
  51          void draw(uchar box); // function used to move elements between [B1-B64]
  52          void clear_array();
  53          void error_crash();
  54          void error_checker();//avoid bricking my game
C51 COMPILER V9.60.0.0   PINGPONG68_V5                                                     08/12/2020 05:55:50 PAGE 2   

  55          void change_incrememt(uchar change);
  56          void getinput();//checks input from keyboard
  57          
  58          void Xclock_setup(){
  59   1      //GameSpeed1=1Sec,
  60   1      //high=faster
  61   1      XgameSpeed=13;
  62   1      autospeed=1;
  63   1      highspeed=20;
  64   1      Xclock_divider=256;
  65   1      Xclock_Value1=65536;
  66   1      Xclock_Value2=46082;
  67   1      }
  68          
  69          void getinput(){
  70   1        //while(key1==0||key2==0||key3==0||key4==0){
  71   1          if(key1==0){//bottom racket push_left
  72   2            bottomracket_location--;
  73   2            if(bottomracket_location<=0){bottomracket_location=0;}
  74   2            if(bottomracket_location>=6){bottomracket_location=6;}
  75   2            //break;
  76   2          }
  77   1          if(key2==0){//bottom racket push_right
  78   2            bottomracket_location++;
  79   2            if(bottomracket_location<=-1){bottomracket_location=-1;}
  80   2            if(bottomracket_location>=8){bottomracket_location=8;}
  81   2            //break;
  82   2          }
  83   1          if(key3==0){//top racket push_left
  84   2            topracket_location--;
  85   2            if(topracket_location<=57){topracket_location=57;}
  86   2            if(topracket_location>=64){topracket_location=64;}
  87   2          }
  88   1          if(key4==0){//top racket push_right
  89   2            topracket_location++;
  90   2            if(topracket_location<=57){topracket_location=57;}
  91   2            if(topracket_location>=64){topracket_location=64;}
  92   2          }
  93   1          //while(1){
  94   1          while(key1==0||key2==0||key3==0||key4==0){
  95   2            clear_array();
  96   2            updateassets();
  97   2            disp_col();
  98   2          }
  99   1        //}
 100   1      }
 101          void main(){
 102   1        Xclock_init();// initiates SysClock+interupt [GameClock]
 103   1        while(error==0){
 104   2          getinput();
 105   2          clear_array();
 106   2          updateassets();
 107   2          //draw(ball_location);
 108   2          disp_col();
 109   2          error_checker();
 110   2        }
 111   1        error_crash();
 112   1      }
 113          
 114          void update_bottomracket(){
 115   1        uchar limit=3;
 116   1        if(bottomracket_location==0){//racket out of  bound on left
C51 COMPILER V9.60.0.0   PINGPONG68_V5                                                     08/12/2020 05:55:50 PAGE 3   

 117   2          draw(1);draw(2);
 118   2          return;
 119   2        }
 120   1        if(bottomracket_location==-1){//racket out of  bound on left
 121   2          draw(1);
 122   2          return;
 123   2        }
 124   1        if(bottomracket_location==7){//racket out of  bound on right
 125   2          draw(8);draw(7);
 126   2          return;
 127   2        }
 128   1        if(bottomracket_location==8){//racket out of  bound on right
 129   2          draw(8);
 130   2          return;
 131   2        }
 132   1        for(xx=0;xx<3;xx++){
 133   2          draw((bottomracket_location)+xx);
 134   2        }
 135   1      }
 136          void update_topracket(){
 137   1        for(xx=0;xx<3;xx++){
 138   2          draw((topracket_location)+xx);
 139   2        }
 140   1      } 
 141          
 142          void updateassets(){//updates ball and all rackats on screen
 143   1        update_bottomracket(); //print bottomracket
 144   1        draw(ball_location);//prints ball in array
 145   1        update_topracket();//print top racket
 146   1      }
 147          
 148          void update_ball(){
 149   1        // SAVING PREV BOUNCE LOCATION
 150   1        old_ball_location=ball_location;
 151   1        // BOUNCING BALL
 152   1        bounce_ball();
 153   1        
 154   1        // TOP RACKET
 155   1        // MOVING BALL +/- 1 ROW
 156   1        //ball_location=ball_location+increment;
 157   1        
 158   1        // BOTTOM RACKET
 159   1        if(ball_location==(bottomracket_location)||ball_location==(bottomracket_location+1)||ball_location==(bott
             -omracket_location+2)){
 160   2          ball_location=old_ball_location;
 161   2          increment=-(increment);//REVERSE BALL DIRECTION
 162   2          forward=1;//FLAG FOR BALL DIRECTION GOING FORWARD
 163   2          ball_location=ball_location+increment;
 164   2          return;
 165   2          //break;
 166   2        }
 167   1        // TOP RACKET
 168   1        else if(ball_location==(topracket_location)||ball_location==(topracket_location+1)||ball_location==(topra
             -cket_location+2)){
 169   2          ball_location=old_ball_location;
 170   2          increment= -(increment);//REVERSE BALL DIRECTION
 171   2          forward=0;//FLAG FOR BALL DIRECTION GOING BACKWARDS
 172   2          ball_location=ball_location+increment;
 173   2          return;
 174   2          //break;
 175   2        }
 176   1        //ball_location=ball_location+increment;
C51 COMPILER V9.60.0.0   PINGPONG68_V5                                                     08/12/2020 05:55:50 PAGE 4   

 177   1          
 178   1      
 179   1        // CHECKING IF WIN OR LOST
 180   1        if(ball_location<1){error=10;return;}//lost
 181   1        else if(ball_location>64){error=20;return;}//won
 182   1      }
 183          
 184          
 185          void bounce_ball(){
 186   1      
 187   1        //BOUNCING ON RIGHT_WALL
 188   1        if(ball_location==16||ball_location==24||ball_location==32||ball_location==40||ball_location==48||ball_lo
             -cation==56){
 189   2          if(forward==1){increment=7;ball_location=ball_location+increment;return;}
 190   2          else if(forward==0){increment=-9;ball_location=ball_location+increment;return;}
 191   2        }
 192   1        //BOUNCING ON LEFT_WALL
 193   1        else if(ball_location==9||ball_location==17||ball_location==25||ball_location==33||ball_location==41||bal
             -l_location==49){
 194   2          if(forward==1){increment=9;ball_location=ball_location+increment;return;}
 195   2          else if(forward==0){increment=-7;ball_location=ball_location+increment;return;}
 196   2        }
 197   1        ball_location=ball_location+increment;
 198   1        //BOUNCING ON BOTTOM_RACKET
 199   1        if(ball_location==(bottomracket_location)){increment=-9;return;}
 200   1        else if(ball_location==(bottomracket_location+1)){increment=-8;return;}
 201   1        else if(ball_location==(bottomracket_location+2)){increment=-7;return;}
 202   1        //BOUNCING ON TOP_RACKET
 203   1        else if(ball_location==(topracket_location)){increment=7;return;}
 204   1        else if(ball_location==(topracket_location+1)){increment=8;return;}
 205   1        else if(ball_location==(topracket_location+2)){increment=9;return;}
 206   1      }
 207          
 208          void change_incrememt(uchar change){
 209   1        increment=change;
 210   1        if(increment<=0){increment=1;}
 211   1        if(increment>9){increment=9;}
 212   1      }
 213          
 214          void error_checker(){
 215   1        if(increment<=0&&increment>8){error=2;return;}//Error2 increment out of bound
 216   1        if(ball_location<9&&ball_location>56){error=3;return;}//Error3 ball out of bound
 217   1        if(ball_location<1){error=10;return;}//lost
 218   1        if(ball_location>64){error=20;return;}//won
 219   1      
 220   1      }
 221          
 222          void clear_array(){
 223   1        uchar ar,ac;
 224   1        for(ar=0;ar<8;ar++){
 225   2          for(ac=0;ac<8;ac++){
 226   3            map[ar][ac]=0;
 227   3          }
 228   2        }
 229   1      }
 230          void error_crash(){
 231   1        //lost game
 232   1        if(error==10){clear_array();
 233   2          for(xx=3;xx<=59;xx+=8){draw(xx);}
 234   2          for(xx=4;xx<=8;xx+=1){draw(xx);}
 235   2          xled(11);
 236   2          while(1){
C51 COMPILER V9.60.0.0   PINGPONG68_V5                                                     08/12/2020 05:55:50 PAGE 5   

 237   3            disp_col();
 238   3          }
 239   2        }
 240   1        //won game
 241   1        if(error==20){while(1){
 242   3          clear_array();
 243   3          for(xx=1;xx<=64;xx++){
 244   4            draw(xx);
 245   4            disp_col();
 246   4            //xdelay(1);
 247   4            }
 248   3          }
 249   2        }
 250   1        //error
 251   1        clear_array();
 252   1        //draw 'e'
 253   1        draw(36);draw(35);draw(34);
 254   1        draw(28);draw(26);draw(20);
 255   1        draw(19);draw(18);draw(10);
 256   1        draw(4);draw(3);draw(2);
 257   1        //draw 'r'
 258   1        draw(32);draw(31);draw(30);
 259   1        draw(22);draw(14);draw(6);
 260   1        for(xx=56;xx<(56+error);xx++){
 261   2          draw(xx);
 262   2        }
 263   1        while(1){
 264   2          disp_col();
 265   2        }
 266   1      }
 267          void draw(uchar box){
 268   1      if(box<1){error=4;return;}
 269   1      if(box>64){error=4;return;}
 270   1      if(box>0&&box<=8){col2draw=1;}
 271   1      if(box>8&&box<=16){col2draw=2;}
 272   1      if(box>16&&box<=24){col2draw=3;}
 273   1      if(box>24&&box<=32){col2draw=4;}
 274   1      if(box>32&&box<=40){col2draw=5;}
 275   1      if(box>40&&box<=48){col2draw=6;}
 276   1      if(box>48&&box<=56){col2draw=7;}
 277   1      if(box>56&&box<=64){col2draw=8;}
 278   1        row2draw=box-(8*(col2draw-1));
 279   1        map[row2draw-1][col2draw-1]=1;
 280   1      }
 281          
 282          
 283          
 284          void Xclock_reset(){
 285   1        TH0=(Xclock_Value1-Xclock_Value2)/Xclock_divider;
 286   1        TL0=(Xclock_Value1-Xclock_Value2)%Xclock_divider;
 287   1      }
 288          
 289          void Xclock_init(){
 290   1        Xclock_setup();
 291   1        TMOD = 0x01; //TIMER MODE1
 292   1        Xclock_reset();//RESETS TIMER
 293   1        TR0 = 1; //STARTS TIMER
 294   1        //ENABLE INTERUPT
 295   1        EA = 1; //CPU INTERUPT ENABLE
 296   1        ET0 = 1; //ENABLE TIMER 0
 297   1      }
 298          
C51 COMPILER V9.60.0.0   PINGPONG68_V5                                                     08/12/2020 05:55:50 PAGE 6   

 299          void Xclock_interupt() interrupt 1 {
 300   1        Xclock_reset(); //RESET CLOCK
 301   1        Xclock++; // increament count
 302   1        if(Xclock>=254){Xclock=0;}
 303   1        //if(Xclock==(1*XgameSpeed)){//20 = 1 sec
 304   1        //if(Xclock==20/XgameSpeed){//GameSpeed
 305   1        if(Xclock%(21-XgameSpeed)==0){//GameSpeed
 306   2          xflag = ~xflag;
 307   2          if(xflag==flag){
 308   3            P1=0xfe;
 309   3          }
 310   2          else if(xflag!=flag){
 311   3            P1=0xff;
 312   3          }
 313   2          update_ball();
 314   2          //disp_col();
 315   2        }
 316   1        //GAME IF STATEMENTS
 317   1        //if(Gseconds%30==0){XgameSpeed=XgameSpeed+1;if(XgameSpeed>=20){XgameSpeed=20;}}//every 30 sec increase g
             -ame speed
 318   1        //if(Xclock>=20){Xclock=0;}
 319   1        //GET_CONTROLS  
 320   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2472    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     64    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
