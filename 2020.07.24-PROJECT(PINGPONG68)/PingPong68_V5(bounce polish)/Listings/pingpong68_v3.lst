C51 COMPILER V9.60.0.0   PINGPONG68_V3                                                     07/27/2020 16:44:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PINGPONG68_V3
OBJECT MODULE PLACED IN .\Objects\pingpong68_v3.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pingpong68_v3.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\pingpong68_v3.lst) TABS(2) OBJECT(.\Objects\pingpong68_v3.obj)

line level    source

   1          #include <reg52.h>
   2          //#include <string.h>
   3          //#include <math.h>
   4          #include <paulobetaX5.h>
   5          #include <paulo8x8_v1.h>
   6          #include <GameTimerX1.h>
   7          #define uchar unsigned char
   8          
   9          uchar error=0; // if encounter error=1, if not =0;
  10          sbit light0=P1^7;
  11          sbit light1=P1^6;
  12          sbit light2=P1^5;
  13          sbit light3=P1^4;
  14          sbit light4=P1^3;
  15          sbit light5=P1^2;
  16          sbit light6=P1^1;
  17          sbit light7=P1^0;
  18          
  19          uchar xx; // for forloops
  20          //flags
  21          uchar flag = 1;
  22          uchar xflag=1;
  23          
  24          uchar row2draw;// row to draw on
  25          uchar col2draw;// column to draw on
  26          
  27          uchar increment=8;//value pushing ball
  28          uchar ball_location=12;// ranges btween [B9 - B49 
  29          uchar old_ball_location;
  30          uchar bottomracket_location; // 6 locations [B1-B6]
  31          uchar topracket_location; // 6 locations [B57-B62]
  32          
  33          void psplit(uchar splitinput); // split input into 3 for display on 7seg
  34          //void showtimer();// shows timer on 7seg
  35          
  36          void updateAssets();//updates ball+rackets
  37          void update_ball(); //auto moves ball +/- 1row
  38          void update_bottomracket(); // gets input to move bottom racket
  39          void update_topracket(); //get input to move top racket
  40          void draw(uchar box); // function used to move elements between [B1-B64]
  41          void clear_array();
  42          void error_crash();
  43          void error_checker();//avoid bricking my game
  44          void change_incrememt();
  45          void getinput();//checks input from keyboard
  46          
  47          void main(){
  48   1        Xclock_init();// initiates SysClock+interupt [GameClock]
  49   1        while(1){
  50   2          getinput();
  51   2          clear_array();
  52   2          updateAssets();
  53   2          disp_col();
  54   2          error_checker();
C51 COMPILER V9.60.0.0   PINGPONG68_V3                                                     07/27/2020 16:44:23 PAGE 2   

  55   2        }
  56   1        error_crash();
  57   1      }
  58          
  59          
  60          
  61          void updateAssets(){//updates ball and all rackats
  62   1        update_bottomracket();
  63   1        draw(ball_location);
  64   1        update_topracket();
  65   1      }
  66          
  67          void update_ball(){
  68   1        old_ball_location=ball_location;
  69   1        ball_location=ball_location+increment;
  70   1        if(ball_location<9){
  71   2          ball_location=old_ball_location;
  72   2          increment=-(increment);
  73   2          ball_location=ball_location+increment;
  74   2          }
  75   1        if(ball_location>56){
  76   2          ball_location=old_ball_location;
  77   2          increment= -(increment);
  78   2          ball_location=ball_location+increment;
  79   2          }
  80   1        draw(ball_location);
  81   1        //draw(xx);
  82   1      }
  83          
  84          void change_incrememt(uchar change){
  85   1        increment=change;
  86   1        if(increment<=0){increment=1;}
  87   1        if(increment>8){increment=8;}
  88   1      }
  89          
  90          void error_checker(){
  91   1        if(increment<=0&&increment>8){error=2;return;}//Error2 increment out of bound
  92   1        if(ball_location<9&&ball_location>56){error=3;return;}//Error3 ball out of bound
  93   1      }
  94          
  95          void clear_array(){
  96   1        uchar ar,ac;
  97   1        for(ar=0;ar<8;ar++){
  98   2          for(ac=0;ac<8;ac++){
  99   3            map[ar][ac]=0;
 100   3          }
 101   2        }
 102   1      }
 103          void error_crash(){
 104   1        clear_array();
 105   1        //draw 'e'
 106   1        draw(36);draw(35);draw(34);
 107   1        draw(28);draw(26);draw(20);
 108   1        draw(19);draw(18);draw(10);
 109   1        draw(4);draw(3);draw(2);
 110   1        //draw 'r'
 111   1      
 112   1        draw(32);draw(31);draw(30);
 113   1        draw(22);draw(14);draw(6);
 114   1        for(xx=56;xx<(56+error);xx++){
 115   2          draw(xx);
 116   2        }
C51 COMPILER V9.60.0.0   PINGPONG68_V3                                                     07/27/2020 16:44:23 PAGE 3   

 117   1        while(1){
 118   2          disp_col();
 119   2        }
 120   1      }
 121          void draw(uchar box){
 122   1      if(box<=0){error=1;return;}
 123   1      if(box>64){error=1;return;}
 124   1      if(box>0&&box<=8){col2draw=1;}
 125   1      if(box>8&&box<=16){col2draw=2;}
 126   1      if(box>16&&box<=24){col2draw=3;}
 127   1      if(box>24&&box<=32){col2draw=4;}
 128   1      if(box>32&&box<=40){col2draw=5;}
 129   1      if(box>40&&box<=48){col2draw=6;}
 130   1      if(box>48&&box<=56){col2draw=7;}
 131   1      if(box>56&&box<=64){col2draw=8;}
 132   1        row2draw=box-(8*(col2draw-1));
 133   1        map[row2draw-1][col2draw-1]=1;
 134   1      }
*** WARNING C294 IN LINE 56 OF pingpong68_v3.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1730    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     64    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     39       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
