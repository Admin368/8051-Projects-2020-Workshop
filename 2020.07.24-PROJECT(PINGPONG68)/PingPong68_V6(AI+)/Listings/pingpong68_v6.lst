C51 COMPILER V9.60.0.0   PINGPONG68_V6                                                     08/25/2020 02:15:34 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PINGPONG68_V6
OBJECT MODULE PLACED IN .\Objects\pingpong68_v6.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pingpong68_v6.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\pingpong68_v6.lst) TABS(2) OBJECT(.\Objects\pingpong68_v6.obj)

line level    source

   1          #include <reg52.h>
   2          //#include <string.h>
   3          //#include <math.h>
   4          #include <paulobetaX5.h>
   5          #include <paulo8x8_v1.h>
   6          //#include <gametimerX1.h>
   7          #define uchar unsigned char
   8          //MOVEMENT
   9          char move_method=2;
  10          char rand_char;
  11          char rand_int;
  12          //AI
  13          char AI_MODE=1;
  14          char cal_pos=0; // calculated possition
  15          //keys
  16          sbit key1=P3^4;
  17          sbit key2=P3^5;
  18          sbit key3=P3^6;
  19          sbit key4=P3^7;
  20          
  21          //gamespeed
  22          uchar autospeed;//whether or not to increase speed automatically
  23          uchar highspeed;//higest speed you can go to
  24          uchar Xclock = 0;
  25          char Xclock_old;
  26          uchar XgameSpeed=15;
  27          char Xclock_divider;
  28          char Xclock_Value1,Xclock_Value2;
  29          
  30          //implement score
  31          uchar error=0; // if encounter error=1, if not =0;
  32          uchar xx; // for forloops
  33          //flags
  34          uchar forward=1;
  35          uchar flag = 1;
  36          uchar xflag=1;
  37          
  38          uchar row2draw;// row to draw on
  39          uchar col2draw;// column to draw on
  40          
  41          uchar increment=8;//value pushing ball
  42          uchar ball_location=12;// ranges btween [B9 - B49 
  43          uchar old_ball_location;
  44          uchar bottomracket_location=3; // 6 locations [B1-B6]
  45          uchar topracket_location=59; // 6 locations [B57-B62]
  46          
  47          void Xclock_setup();
  48          void Xclock_reset();
  49          void Xclock_init();
  50          void psplit(uchar splitinput); // split input into 3 for display on 7seg
  51          void updateassets();//updates ball+rackets
  52          void update_ball(); //auto moves ball +/- 1row
  53          void bounce_ball(); //bounces ball if hit any surface
  54          void update_bottomracket(); // gets input to move bottom racket
C51 COMPILER V9.60.0.0   PINGPONG68_V6                                                     08/25/2020 02:15:34 PAGE 2   

  55          void update_topracket(); //get input to move top racket
  56          void draw(uchar box); // function used to move elements between [B1-B64]
  57          void clear_array();
  58          void error_crash();
  59          void error_checker();//avoid bricking my game
  60          void change_incrememt(uchar change);
  61          void getinput();//checks input from keyboard
  62          
  63          char random_num(){
  64   1        rand_int=rand()%3;
*** WARNING C206 IN LINE 64 OF pingpong68_v6.c: 'rand': missing function-prototype
  65   1        return rand_char;
  66   1      }
  67          void AI_Move(){
  68   1        if(ball_location>8&&ball_location<57){
  69   2          cal_pos=ball_location%8;
  70   2          if(cal_pos==0){cal_pos=8;}
  71   2          cal_pos=cal_pos-2;
  72   2          switch(move_method){
  73   3            case 1://1ST_MOVE_METHOD
  74   3              topracket_location=57+cal_pos;
  75   3              if(topracket_location>64){topracket_location=64;}
  76   3              else if(topracket_location<55){topracket_location=55;}
  77   3              break;
  78   3            case 2://2ND_MOVE_METHOD
  79   3              cal_pos=cal_pos+2;
  80   3              if(cal_pos<(topracket_location-56)){topracket_location--;}
  81   3              else if(cal_pos>(topracket_location-56)){topracket_location++;}
  82   3              if(topracket_location>64){topracket_location=64;}
  83   3              else if(topracket_location<55){topracket_location=55;}
  84   3              break;
  85   3            //default:
  86   3          }
  87   2        }
  88   1      }
  89          void AI_Calculate(){
  90   1        old_ball_location=ball_location;
  91   1        //BOUNCING ON RIGHT_WALL
  92   1        if(ball_location==16||ball_location==24||ball_location==32||ball_location==40||ball_location==48||ball_lo
             -cation==56){
  93   2          if(forward==1){increment=7;ball_location=ball_location+increment;return;}
  94   2          else if(forward==0){increment=-9;ball_location=ball_location+increment;return;}
  95   2        }
  96   1        //BOUNCING ON LEFT_WALL
  97   1        else if(ball_location==9||ball_location==17||ball_location==25||ball_location==33||ball_location==41||bal
             -l_location==49){
  98   2          if(forward==1){increment=9;ball_location=ball_location+increment;return;}
  99   2          else if(forward==0){increment=-7;ball_location=ball_location+increment;return;}
 100   2        }
 101   1        ball_location=ball_location+increment;
 102   1        //BOUNCING ON BOTTOM_RACKET
 103   1        if(ball_location==(bottomracket_location)){increment=-9;return;}
 104   1        else if(ball_location==(bottomracket_location+1)){increment=-8;return;}
 105   1        else if(ball_location==(bottomracket_location+2)){increment=-7;return;}
 106   1        //BOUNCING ON TOP_RACKET
 107   1        else if(ball_location==(topracket_location)){increment=7;return;}
 108   1        else if(ball_location==(topracket_location+1)){increment=8;return;}
 109   1        else if(ball_location==(topracket_location+2)){increment=9;return;}
 110   1      
 111   1          //BOUNCING ON RIGHT_WALL
 112   1        if(ball_location==16||ball_location==24||ball_location==32||ball_location==40||ball_location==48||ball_lo
             -cation==56){
C51 COMPILER V9.60.0.0   PINGPONG68_V6                                                     08/25/2020 02:15:34 PAGE 3   

 113   2          if(forward==1){increment=7;ball_location=ball_location+increment;return;}
 114   2          else if(forward==0){increment=-9;ball_location=ball_location+increment;return;}
 115   2        }
 116   1        //BOUNCING ON LEFT_WALL
 117   1        else if(ball_location==9||ball_location==17||ball_location==25||ball_location==33||ball_location==41||bal
             -l_location==49){
 118   2          if(forward==1){increment=9;ball_location=ball_location+increment;return;}
 119   2          else if(forward==0){increment=-7;ball_location=ball_location+increment;return;}
 120   2        }
 121   1        ball_location=ball_location+increment;
 122   1        //BOUNCING ON BOTTOM_RACKET
 123   1        if(ball_location==(bottomracket_location)){increment=-9;return;}
 124   1        else if(ball_location==(bottomracket_location+1)){increment=-8;return;}
 125   1        else if(ball_location==(bottomracket_location+2)){increment=-7;return;}
 126   1        //BOUNCING ON TOP_RACKET
 127   1        else if(ball_location==(topracket_location)){increment=7;return;}
 128   1        else if(ball_location==(topracket_location+1)){increment=8;return;}
 129   1        else if(ball_location==(topracket_location+2)){increment=9;return;}
 130   1      }
 131          
 132          void Xclock_setup(){
 133   1      //GameSpeed1=1Sec,
 134   1      //high=faster
 135   1      XgameSpeed=13;
 136   1      autospeed=1;
 137   1      highspeed=20;
 138   1      Xclock_divider=256;
 139   1      Xclock_Value1=65536;
 140   1      Xclock_Value2=46082;
 141   1      }
 142          
 143          void getinput(){
 144   1      
 145   1        //while(key1==0||key2==0||key3==0||key4==0){
 146   1          if(key1==0){//bottom racket push_left
 147   2            bottomracket_location--;
 148   2            if(bottomracket_location<=0){bottomracket_location=0;}
 149   2            else if(bottomracket_location>=8){bottomracket_location=8;}
 150   2            //break;
 151   2          }
 152   1          else if(key2==0){//bottom racket push_right
 153   2            bottomracket_location++;
 154   2            if(bottomracket_location<=0){bottomracket_location=0;}
 155   2            else if(bottomracket_location>=8){bottomracket_location=8;}
 156   2            //break;
 157   2          } 
 158   1          else if(key3==0){//top racket push_left
 159   2            if(AI_MODE==0){ 
 160   3              topracket_location--;
 161   3              if(topracket_location<=55){topracket_location=55;}
 162   3              else if(topracket_location>=64){topracket_location=64;}
 163   3            }
 164   2          }
 165   1          else if(key4==0){//top racket push_right
 166   2            if(AI_MODE==0){ 
 167   3              topracket_location++;
 168   3              if(topracket_location<=55){topracket_location=55;}
 169   3              else if(topracket_location>=64){topracket_location=64;}
 170   3            }
 171   2          }
 172   1          //while(1){
 173   1          while(key1==0||key2==0||key3==0||key4==0){
C51 COMPILER V9.60.0.0   PINGPONG68_V6                                                     08/25/2020 02:15:34 PAGE 4   

 174   2            clear_array();
 175   2            updateassets();
 176   2            disp_col();
 177   2          }
 178   1        //}
 179   1      }
 180          
 181          void check_score(){
 182   1      // CHECKING IF WIN OR LOST
 183   1        if(ball_location<=8){error=10;error_crash();}//lost
 184   1        else if(ball_location>=64){error=20;error_crash();}//won
 185   1      }
 186          
 187          void main(){
 188   1        Xclock_init();// initiates SysClock+interupt [GameClock]
 189   1        while(error==0){
 190   2          getinput();
 191   2          clear_array();
 192   2          updateassets();
 193   2          //draw(ball_location);
 194   2          disp_col();
 195   2          error_checker();
 196   2        }
 197   1        error_crash();
 198   1      }
 199          
 200          void update_bottomracket(){
 201   1        uchar limit=3;
 202   1        switch(bottomracket_location){
 203   2          case -1://racket out of  bound on left
 204   2            draw(1);
 205   2            break;
 206   2          case 0://racket out of  bound on left
 207   2            draw(1);draw(2);
 208   2            break;
 209   2          case 7://racket out of  bound on right
 210   2            draw(7);draw(8);
 211   2            break;
 212   2          case 8://racket out of  bound on right
 213   2            draw(8);
 214   2            break;
 215   2          default:
 216   2            for(xx=0;xx<3;xx++){
 217   3              draw((bottomracket_location)+xx);
 218   3            }
 219   2        }
 220   1      }
 221          
 222          void update_topracket(){
 223   1        switch(topracket_location){
 224   2          case 55:
 225   2            draw(57);
 226   2            break;
 227   2          case 56:
 228   2            draw(57);draw(58);
 229   2            break;
 230   2          case 63:
 231   2            draw(63);draw(64);
 232   2            break;
 233   2          case 64:
 234   2            draw(64);
 235   2            break;
C51 COMPILER V9.60.0.0   PINGPONG68_V6                                                     08/25/2020 02:15:34 PAGE 5   

 236   2          default:
 237   2            for(xx=0;xx<3;xx++){
 238   3              draw((topracket_location)+xx);
 239   3            }
 240   2        }
 241   1      } 
 242          
 243          void updateassets(){//updates ball and all rackats on screen
 244   1        update_bottomracket(); //print bottomracket
 245   1        draw(ball_location);//prints ball in array
 246   1        update_topracket();//print top racket
 247   1      }
 248          
 249          void update_ball(){
 250   1        // SAVING PREV BOUNCE LOCATION
 251   1        old_ball_location=ball_location;
 252   1        // BOUNCING BALL
 253   1        bounce_ball();
 254   1        
 255   1        // TOP RACKET
 256   1        // MOVING BALL +/- 1 ROW
 257   1        //ball_location=ball_location+increment;
 258   1        
 259   1        // BOTTOM RACKET
 260   1        if(ball_location==(bottomracket_location)||ball_location==(bottomracket_location+1)||ball_location==(bott
             -omracket_location+2)){
 261   2          ball_location=old_ball_location;
 262   2          increment=-(increment);//REVERSE BALL DIRECTION
 263   2          forward=1;//FLAG FOR BALL DIRECTION GOING FORWARD
 264   2          ball_location=ball_location+increment;
 265   2          //AI_Calculate();
 266   2          //check_score();
 267   2          return;
 268   2          //break;
 269   2        }
 270   1        // TOP RACKET
 271   1        else if(ball_location==(topracket_location)||ball_location==(topracket_location+1)||ball_location==(topra
             -cket_location+2)){
 272   2          ball_location=old_ball_location;
 273   2          increment= -(increment);//REVERSE BALL DIRECTION
 274   2          forward=0;//FLAG FOR BALL DIRECTION GOING BACKWARDS
 275   2          ball_location=ball_location+increment;
 276   2          //check_score();
 277   2          return;
 278   2          //break;
 279   2        }
 280   1        //ball_location=ball_location+increment;
 281   1        //check_score();
 282   1      }
 283          
 284          void bounce_ball(){
 285   1      
 286   1        //BOUNCING ON RIGHT_WALL
 287   1        if(ball_location==16||ball_location==24||ball_location==32||ball_location==40||ball_location==48||ball_lo
             -cation==56){
 288   2          if(forward==1){increment=7;ball_location=ball_location+increment;return;}
 289   2          else if(forward==0){increment=-9;ball_location=ball_location+increment;return;}
 290   2        }
 291   1        //BOUNCING ON LEFT_WALL
 292   1        else if(ball_location==9||ball_location==17||ball_location==25||ball_location==33||ball_location==41||bal
             -l_location==49){
 293   2          if(forward==1){increment=9;ball_location=ball_location+increment;return;}
C51 COMPILER V9.60.0.0   PINGPONG68_V6                                                     08/25/2020 02:15:34 PAGE 6   

 294   2          else if(forward==0){increment=-7;ball_location=ball_location+increment;return;}
 295   2        }
 296   1        ball_location=ball_location+increment;
 297   1        /*
 298   1        //BOUNCING ON BOTTOM_RACKET
 299   1        if(ball_location==(bottomracket_location)){increment=-9;return;}
 300   1        else if(ball_location==(bottomracket_location+1)){increment=-8;return;}
 301   1        else if(ball_location==(bottomracket_location+2)){increment=-7;return;}
 302   1        //BOUNCING ON TOP_RACKET
 303   1        else if(ball_location==(topracket_location)){increment=7;return;}
 304   1        else if(ball_location==(topracket_location+1)){increment=8;return;}
 305   1        else if(ball_location==(topracket_location+2)){increment=9;return;}
 306   1        */
 307   1        //BOUNCING ON BOTTOM_RACKET
 308   1        if(ball_location==(bottomracket_location)){increment=-9;}
 309   1        else if(ball_location==(bottomracket_location+1)){increment=-8;}
 310   1        else if(ball_location==(bottomracket_location+2)){increment=-7;}
 311   1        //BOUNCING ON TOP_RACKET
 312   1        else if(ball_location==(topracket_location)){increment=7;if(xflag==flag){XgameSpeed++;}}
 313   1        else if(ball_location==(topracket_location+1)){increment=8;if(xflag==flag){XgameSpeed++;}}
 314   1        else if(ball_location==(topracket_location+2)){increment=9;if(xflag==flag){XgameSpeed++;}}
 315   1        if(XgameSpeed>=20){XgameSpeed=20;}
 316   1        return;
 317   1      }
 318          
 319          void change_incrememt(uchar change){
 320   1        increment=change;
 321   1        if(increment<=0){increment=1;}
 322   1        if(increment>9){increment=9;}
 323   1      }
 324          
 325          void error_checker(){
 326   1        if(increment<=0&&increment>8){error=2;return;}//Error2 increment out of bound
 327   1        //if(ball_location<9&&ball_location>56){error=3;return;}//Error3 ball out of bound
 328   1        //if(ball_location<1){error=10;return;}//lost
 329   1        //else if(ball_location>64){error=20;return;}//won
 330   1      
 331   1      }
 332          
 333          void clear_array(){
 334   1        uchar ar,ac;
 335   1        for(ar=0;ar<8;ar++){
 336   2          for(ac=0;ac<8;ac++){
 337   3            map[ar][ac]=0;
 338   3          }
 339   2        }
 340   1      }
 341          void error_crash(){
 342   1        switch(error){
 343   2          case 10://lost game
 344   2            clear_array();
 345   2            for(xx=3;xx<=59;xx+=8){draw(xx);}
 346   2            for(xx=4;xx<=8;xx+=1){draw(xx);}
 347   2            xled(11);
 348   2            while(1){
 349   3              disp_col();
 350   3            }
 351   2            break;  
 352   2          case 20://won game
 353   2            while(1){
 354   3              clear_array();
 355   3              for(xx=1;xx<=64;xx++){
C51 COMPILER V9.60.0.0   PINGPONG68_V6                                                     08/25/2020 02:15:34 PAGE 7   

 356   4                draw(xx);
 357   4                disp_col();
 358   4                //xdelay(1);
 359   4              }
 360   3            }
 361   2            break;
 362   2          default://general Error
 363   2            //error
 364   2            clear_array();
 365   2            //draw 'e'
 366   2            draw(36);draw(35);draw(34);
 367   2            draw(28);draw(26);draw(20);
 368   2            draw(19);draw(18);draw(10);
 369   2            draw(4);draw(3);draw(2);
 370   2            //draw 'r'
 371   2            draw(32);draw(31);draw(30);
 372   2            draw(22);draw(14);draw(6);
 373   2            for(xx=56;xx<(56+error);xx++){
 374   3              draw(xx);
 375   3            }
 376   2            while(1){
 377   3              disp_col();
 378   3            }
 379   2        }
 380   1        
 381   1        
 382   1      }
 383          void draw(uchar box){
 384   1      if(box<1){error=4;return;}
 385   1      if(box>64){error=4;return;}
 386   1      if(box>0&&box<=8){col2draw=1;}
 387   1      if(box>8&&box<=16){col2draw=2;}
 388   1      if(box>16&&box<=24){col2draw=3;}
 389   1      if(box>24&&box<=32){col2draw=4;}
 390   1      if(box>32&&box<=40){col2draw=5;}
 391   1      if(box>40&&box<=48){col2draw=6;}
 392   1      if(box>48&&box<=56){col2draw=7;}
 393   1      if(box>56&&box<=64){col2draw=8;}
 394   1        row2draw=box-(8*(col2draw-1));
 395   1        map[row2draw-1][col2draw-1]=1;
 396   1      }
 397          
 398          
 399          
 400          void Xclock_reset(){
 401   1        TH0=(Xclock_Value1-Xclock_Value2)/Xclock_divider;
 402   1        TL0=(Xclock_Value1-Xclock_Value2)%Xclock_divider;
 403   1      }
 404          
 405          void Xclock_init(){
 406   1        Xclock_setup();
 407   1        TMOD = 0x01; //TIMER MODE1
 408   1        Xclock_reset();//RESETS TIMER
 409   1        TR0 = 1; //STARTS TIMER
 410   1        //ENABLE INTERUPT
 411   1        EA = 1; //CPU INTERUPT ENABLE
 412   1        ET0 = 1; //ENABLE TIMER 0
 413   1      }
 414          
 415          void Xclock_interupt() interrupt 1 {
 416   1        Xclock_reset(); //RESET CLOCK
 417   1        Xclock++; // increament count
C51 COMPILER V9.60.0.0   PINGPONG68_V6                                                     08/25/2020 02:15:34 PAGE 8   

 418   1        if(Xclock>=254){Xclock=0;}
 419   1        //if(Xclock==(1*XgameSpeed)){//20 = 1 sec
 420   1        //if(Xclock==20/XgameSpeed){//GameSpeed
 421   1        if(Xclock==(21-XgameSpeed)){ //6 is okay speed
 422   2        //if( (Xclock%(3))==0){//GameSpeed
 423   2        //if(Xclock%(1)==0){
 424   2          xflag = ~xflag;
 425   2          if(xflag==flag){
 426   3            //P1=0xfe;
 427   3          }
 428   2          else if(xflag!=flag){
 429   3            P1=0xff;
 430   3          }
 431   2          if(AI_MODE==1){AI_Move();}
 432   2          //ball_location=bottomracket_location+9;
 433   2          update_ball();
 434   2          check_score();
 435   2          Xclock=0;
 436   2          //disp_col();
 437   2        }
 438   1        //GAME IF STATEMENTS
 439   1        //if(Gseconds%30==0){XgameSpeed=XgameSpeed+1;if(XgameSpeed>=20){XgameSpeed=20;}}//every 30 sec increase g
             -ame speed
 440   1        //if(Xclock>=20){Xclock=0;}
 441   1        //GET_CONTROLS  
 442   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3156    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     64    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     48       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
